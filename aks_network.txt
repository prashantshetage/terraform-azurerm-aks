//**********************************************************************************************
// AKS Networking
# Subnet
variable "virtual_network_name" {
  type = string
  description = "(Optional) The name of the virtual network to which to attach the subnet"
  default = null
}

variable "aks_subnet_name" {
  type        = string
  description = "(Optional) The name for the AKS subnet"
  default = "aks-subnet"
}

variable "address_prefixes" {
  type = list(string)
  description = "(Optional) The address prefixes to use for the subnet"
  default = []
}

variable "service_endpoints" {
  type        = list(string)
  description = "(Optional) The list of Service endpoints to associate with the AKS subnet"
  default     = []
}


# Private Link
variable "enforce_private_link_endpoint_network_policies" {
  type        = bool
  description = "(Optional) Enable or Disable network policies for the private link endpoint on the subnet"
  default     = false
}
variable "enforce_private_link_service_network_policies" {
  type        = bool
  description = "(Optional) Enable or Disable network policies for the private link service on the subnet"
  default     = false
}


/* variable "subnet" {
  type = map(object({
    name                      = string       #(Required) The name of the subnet
    virtual_network_name      = string       #(Required) The name of the virtual network to which to attach the subnet
    address_prefixes          = list(string) #(Optional) The address prefixes to use for the subnet
    network_security_group_id = string       #(Optional) The ID of the Network Security Group which should be associated with the Subnet
    route_table_id            = string       #(Required) The ID of the Route Table which should be associated with the Subnet 
  }))
  description = "(Required) Arguments for subnet"
  default     = {}
} */



// Optional Variables
/* variable "delegation" {
  type = map(object({
    name = string #(Required) A name for this delegation.
    service_delegation = object({
      name    = string       # (Required) The name of service to delegate to
      actions = list(string) #(Optional) A list of Actions which should be delegated
    })
  }))
  description = "(Optional) One or more delegation blocks"
  default     = {}
} */





/* variable "subnet_route_table_association" {
  type        = bool
  description = "(Optional) Accociate on Not the Subnet to Route Table. Route table id must be passed if set to True"
  default     = false
} */

variable "network_security_group_association" {
  type        = bool
  description = "(Optional) Accociate on Not the NSG to Subnet. NSG id must be passed if set to True"
  default     = false
}


// AKS Subnet
resource "azurerm_subnet" "aks" {
  resource_group_name                            = var.resource_group_name
  name                                           = var.aks_subnet_name
  virtual_network_name                           = each.value.virtual_network_name
  address_prefixes                               = each.value.address_prefixes
  service_endpoints                              = var.service_endpoints
  enforce_private_link_endpoint_network_policies = var.enforce_private_link_endpoint_network_policies
  enforce_private_link_service_network_policies  = var.enforce_private_link_service_network_policies

  depends_on = [var.it_depends_on]

  lifecycle {
    ignore_changes = []
  }

  timeouts {
    create = local.timeout_duration
    delete = local.timeout_duration
  }
}


// Route table association
/* resource "azurerm_subnet_route_table_association" "route_table_association" {
  for_each       = var.subnet_route_table_association ? var.subnet : {}
  subnet_id      = each.value.route_table_id != "null" ? azurerm_subnet.subnet[each.key].id : null
  route_table_id = each.value.route_table_id

  depends_on = [
    azurerm_subnet.subnet,
    var.it_depends_on,
  ]

  timeouts {
    create = local.timeout_duration
    delete = local.timeout_duration
  }
} */


// Network Security Group association
resource "azurerm_subnet_network_security_group_association" "nsg_association" {
  for_each                  = var.network_security_group_association ? var.subnet : {}
  subnet_id                 = each.value.network_security_group_id != "null" ? azurerm_subnet.subnet[each.key].id : null
  network_security_group_id = each.value.network_security_group_id

  depends_on = [
    azurerm_subnet.subnet,
    var.it_depends_on
  ]

  timeouts {
    create = local.timeout_duration
    delete = local.timeout_duration
  }
}

